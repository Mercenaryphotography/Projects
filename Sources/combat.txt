# Combat Functions

# Base attack function for player
get_damage_user() {
    damage=$((RANDOM % ( ($max_dmg - $min_dmg + 1) ) + $Player_Strength - $Monster_def))
	Monster_Health=$((Monster_Health - $damage))
	echo Orc takes $damage damage
	sleep 2
}
# Warriors lifegain attack
lifesteal() {
    lfslcost=$(( 6 * Player_lvl ))
    Player_Health=$(( $Player_Health - $lfslcost ))

    # Ensure damage is an integer and division works with floating-point precision
    damage=$((RANDOM % ( ($max_dmg - $min_dmg) ) + 10 + Player_Strength))

    # Calculate lifesteal damage with floating-point precision
    lfsldmg=$(( $damage /5 ))
    # Apply the damage to monster and health to player
    Monster_Health=$(( $Monster_Health - $damage ))
    Player_Health=$(( $Player_Health + $lfsldmg ))

    echo "You focus into your primal core and unleash a beastial attack dealing $damage damage and gaining $lfsldmg health."
    sleep 2
}

# Monster attack
get_damage_mon() {
    damage=$((RANDOM % ($a2 - $a1 + $Monster_Strength - $Player_Defense) ))
	Player_Health=$((Player_Health - $damage))
	echo You take $damage damage
	sleep 2
	
}

orcimg() {
    count=0
# Cat the ascii art, pipe that into a loop that reads each line and inputs it one line at a time into a variable called line, then we
# Echo -e $line to display the txt files with their ansi codes inbedded
Orc1="./Masset/o1.txt"
Orc2="./Masset/o2.txt"
Orc3="./Masset/o3.txt"
while [ $count -le 2 ] ; do
clear
cat $Orc1 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
clear
cat $Orc2 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
clear
cat $Orc3 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
let count++
done
}

koboldimg() {
    count=0
# Cat the ascii art, pipe that into a loop that reads each line and inputs it one line at a time into a variable called line, then we
# Echo -e $line to display the txt files with their ansi codes inbedded
Kbd1="./Masset/k1.txt"
Kbd2="./Masset/k2.txt"
Kbd3="./Masset/k3.txt"
while [ $count -le 2 ] ; do
clear
cat $Kbd1 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
clear
cat $Kbd2 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
clear
cat $Kbd3 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
let count++
done
}

boarimg() {
    count=0
# Cat the ascii art, pipe that into a loop that reads each line and inputs it one line at a time into a variable called line, then we
# Echo -e $line to display the txt files with their ansi codes inbedded
Kbd1="./Masset/k1.txt"
Kbd2="./Masset/k2.txt"
Kbd3="./Masset/k3.txt"
while [ $count -le 2 ] ; do
clear
cat $Kbd1 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
clear
cat $Kbd2 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
clear
cat $Kbd3 | while IFS= read -r line; do echo -e "$line" ; done
sleep 0.25
let count++
done
}



fightfightp() {
# Load Monster Image

# array of monsters by location
monstersp=("Orc" "Kobold" "Boar")

# Randomly select a monster from the monstersp array
selected_monster=${monstersp[$((RANDOM % ${#monstersp[@]}))]}

    # Set stats based on the selected monster
    case $selected_monster in
        "Orc")
            Monster_Health=100
            Monster_Strength=15
			Monster_Defense=3
            Amon_exp=10
            orcimg 
			battleimg=$Orc1
            ;;
        "Kobold")
            Monster_Health=50
            Monster_Strength=10
			Monster_Defense=0
            Amon_exp=5
            koboldimg 
			battleimg=$Kbd1
            ;;
        "Boar")
            Monster_Health=75
            Monster_Damage=15
			Monster_Defense=5
            Amon_exp=8
            boarimg 
			battleimg=$Boar1
            ;;
        *)
            echo "Error: Unknown monster type."
            return
            ;;
    esac
    while true; do
		clear
		run=$((RANDOM % 10 + 1 + $Player_Luck))
       cat ./Masset/o3.txt | while IFS= read -r line; do echo -e "$line" ; done
        # Monster Image and Health always stays on screen during combat
        echo "Player Health: $Player_Health, Monster Health: $Monster_Health"
        cat $menu2
		echo
       #load the action menu and provides the actuall actions.
	   # NEED TO FIX COMBAT TO NOT APPLY DAMAGE IF THE MONSTER DIES BEFORE THEIR DAMAGE ACTION
	   read -p "Choose your action: " action
		case $action in
        1)  get_damage_user ; get_damage_mon ; clear ;;
        2)  if [ $Player_class == "Warrior" ] ; then  lifesteal ; elif [ $Player_class == "Mage" ]; then fireball; elif [ $Player_class == "cutthroat" ]; then backstap; fi ; clear ; get_damage_mon ;;
        #3) clear ; def_up ;clear ; get_damage_mon ;;
        4) clear; coward ;;
        *) clear ; echo "Invalid choice" ;;
    esac
	if [ $Player_Health -lt 1 ] ; then
	break
	elif [ $Monster_Health -lt 1 ] ; then
	echo "Monster defeated! you gain $Amon_exp" experience points
	Player_exp=$((Player_exp + $Amon_exp))
	sleep 2
	let battlep--
    break
	fi
    done
}